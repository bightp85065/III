
<%@ page import="org.json.JSONArray" %>
<%@ page import="org.json.JSONException" %>
<%@ page import="org.json.JSONObject" %>

<%@ page import="javax.imageio.ImageIO" %>
<%@ page import="java.awt.*" %>
<%@ page import="java.awt.image.BufferedImage" %>
<%@ page import="java.io.*" %>
<%@ page import="java.util.ArrayList" %>
<%@ page import="java.util.List" %>
<%@ page import="static java.lang.StrictMath.cos" %>
<%@ page import="static java.lang.StrictMath.sin" %>

<%@ page import="java.io.FileInputStream" %>
<%@ page import="java.io.IOException" %>
<%@ page import="java.io.InputStream" %>

<%@ page import="jxl.Workbook" %>
<%@ page import="jxl.WorkbookSettings" %>
<%@ page import="jxl.write.Label" %>
<%@ page import="jxl.write.WritableSheet" %>
<%@ page import="jxl.write.WritableWorkbook" %>
<%@ page import="jxl.write.WriteException" %>

<%@ page import="com.mitlab.AlgorithmPack" %>
<%@ page import="com.mitlab.DataPacket" %>
<%@ page import="com.mitlab.FunctionPack" %>
<%@ page import="com.mitlab.JSONparser" %>

<%!
	public class EXCELwriter {
    	public void export(DataPacket inputPacket, String fileName) throws WriteException, IOException {
        	System.out.printf("Start Exporting!\n");
			File csvFile = new File(fileName);
       		WorkbookSettings wbSettings = new WorkbookSettings();
	        // wbSettings.setLocale(new Locale("en", "EN"));
    	    WritableWorkbook workbook = null;
        	try {
            	workbook = Workbook.createWorkbook(csvFile, wbSettings);
	        } catch (IOException e) {
    	        e.printStackTrace();
        	}
	        // Excel sheet name. 0 represents first sheet
    	    WritableSheet sheet = workbook.createSheet("Site Survey Report", 0);
        	// adding Titles
	        sheet.addCell(new Label(0, 0, "Deplaoy AP: Index"));
    	    sheet.addCell(new Label(1, 0, "Coordinate X(m)"));
        	sheet.addCell(new Label(2, 0, "Coordinate Y(m)"));

	        sheet.addCell(new Label(3, 0, "Pre-Built AP: Index"));
    	    sheet.addCell(new Label(4, 0, "Coordinate X(m)"));
        	sheet.addCell(new Label(5, 0, "Coordinate Y(m)"));
	        sheet.addCell(new Label(6, 0, "Power"));

    	    sheet.addCell(new Label(7, 0, "Pre-Built Uplink-point: Index"));
        	sheet.addCell(new Label(8, 0, "Coordinate X(m)"));
	        sheet.addCell(new Label(9, 0, "Coordinate Y(m)"));

    	    // write date
	        // Deploy AP
    	    for (int i = 0; i < inputPacket.index_elected_x.size(); i++) {
        	    sheet.addCell(new Label(0, i + 1, String.valueOf(i + 1)));
	            sheet.addCell(new Label(1, i + 1, String.valueOf(inputPacket.index_elected_x.get(i) * inputPacket.scale)));
	            sheet.addCell(new Label(2, i + 1, String.valueOf(inputPacket.index_elected_y.get(i) * inputPacket.scale)));
    	    }
        	// Pre-Built AP
	        for (int i = 0; i < inputPacket.json_content_sensorNode_x.size(); i++) {
    	        sheet.addCell(new Label(3, i + 1, String.valueOf(i + 1)));
        	    sheet.addCell(new Label(4, i + 1, String.valueOf(inputPacket.json_content_sensorNode_x.get(i) * inputPacket.scale)));
	            sheet.addCell(new Label(5, i + 1, String.valueOf(inputPacket.json_content_sensorNode_y.get(i) * inputPacket.scale)));
	            sheet.addCell(new Label(6, i + 1, String.valueOf(inputPacket.json_content_sensorNode_power.get(i))));
    	    }
       		// uplink-Point
	        for (int i = 0; i < inputPacket.json_content_uplinkPoint_x.size(); i++) {
    	        sheet.addCell(new Label(7, i + 1, String.valueOf(i + 1)));
	            sheet.addCell(new Label(8, i + 1, String.valueOf(inputPacket.json_content_uplinkPoint_x.get(i) * inputPacket.scale)));
	            sheet.addCell(new Label(9, i + 1, String.valueOf(inputPacket.json_content_uplinkPoint_y.get(i) * inputPacket.scale)));
	        }

	        workbook.write();
	        workbook.close();
	        System.out.printf("Exporting is done!\n");
	    }
	}

%>

<%
    // main script

    // ----------------------------------- ONLY EXIST IN JSP -----------------------------------

    JSONObject jsonCallback = new JSONObject();

    float scale = Float.parseFloat(request.getParameter("scale"));

    int imgWidth = Integer.valueOf(request.getParameter("imgWidth"));
    int imgHeight = Integer.valueOf(request.getParameter("imgHeight"));

    JSONObject requirementArea = new JSONObject(request.getParameter("requirementArea"));
    JSONArray pos = new JSONArray(request.getParameter("pos"));
    JSONArray ap = new JSONArray(request.getParameter("ap"));

    JSONArray elevator = new JSONArray(request.getParameter("elevator"));
    JSONArray uplinkPoint = new JSONArray(request.getParameter("uplinkPoint"));
    JSONArray sensorNode = new JSONArray(request.getParameter("sensorNode"));
    String apType = request.getParameter("apType");

    JSONObject jsonObj = new JSONObject();

    jsonObj.put("imgWidth", imgWidth);
    jsonObj.put("imgHeight", imgHeight);
    jsonObj.put("scale", scale);
    jsonObj.put("requirementArea", requirementArea);
    jsonObj.put("pos", pos);
    jsonObj.put("ap", ap);
    jsonObj.put("elevator", elevator);
    jsonObj.put("uplinkPoint", uplinkPoint);
    jsonObj.put("sensorNode", sensorNode);
    jsonObj.put("apType", apType);

    // ----------------------------------- ONLY EXIST IN JSP -----------------------------------

	int img_pxl_value;
	    // int weight_value;
    final UByteIndexer img_Idx;
    // final UByteIndexer img_weight_Idx;
    JSONparser    jsonParser    = new JSONparser();
    DataPacket    packet        = new DataPacket();
    ImageWeight   imageWeight   = new ImageWeight();
    AlgorithmPack algorithmPack = new AlgorithmPack();
    FunctionPack  functionPack  = new FunctionPack();
    // ArrayList<Integer>  = new ArrayList<>();
    Mat imgWeight;
    long imageWeight_func_time_start, imageWeight_func_time_end, imageWeight_func_elapsed_time;
    JSONObject jsonObject_indr_img = new JSONObject();
    JSONObject jsonObject_wall_info = null;

    // jsonObject_wall_info = jsonParser.read_jsonfile("wall_dict_info.json");
    // jsonParser.generate_wall_info(packet, jsonObject_wall_info);
    JSONObject wall_silver = new JSONObject();
    wall_silver.put("w_name", "Metal(Silver)");
    wall_silver.put("w_color_rgb", "888888");
    wall_silver.put("w_attenuation_factor" ,  20);
    packet.wall_dict.put("0", wall_silver);

    // System.out.println(jsonObject_wall_info.toString(4));
    // FunctionTest funcitontest = new FunctionTest();

    // color_hex2RGB("4efeb3");
    // int[] color_RGB = new int[3];
    // color_RGB = functionPack.color_hex2RGB("0072e3");
    // System.out.printf("R = %d\n", color_RGB[0]);
    // System.out.printf("G = %d\n", color_RGB[1]);
    // System.out.printf("B = %d\n", color_RGB[2]);
    // /*
    // AP setting
    packet.AP_dict.put("p_d0", -25);     // The strength with dBm at "1 meter" distance(d0) from the AP
    packet.AP_dict.put("nW_C", 3);       // The maximum number of obstructions(walls) up to which the attenuation factor makes a difference
    packet.AP_dict.put("n_rate", 2);     // The rate at which the path loss increases with distance
    packet.AP_dict.put("d0", 1);         // Reference distance
    System.out.println(packet.wall_dict.toString(4));
    System.out.println(packet.AP_dict.toString(4));	
	
    jsonObject_indr_img = jsonObj;
    jsonParser.initialize_all_parameters(packet, jsonObject_indr_img);                          // Initialize all parameters in DataPacket.java
    jsonParser.generate_image_array(packet, functionPack, jsonObject_indr_img);
    jsonParser.generate_requirement_area_image_array(packet, functionPack, jsonObject_indr_img);
    // Transform img_arr to Mat format
    packet.img = functionPack.array_to_mat(packet.img_arr, packet.img);
    packet.img_ori_clone = functionPack.array_to_mat(packet.img_arr_ori_clone, packet.img_ori_clone);

    imageWeight_func_time_start = System.nanoTime();
    imgWeight = imageWeight.imageWeightAlgorithm(packet);

    imageWeight_func_time_end = System.nanoTime();
    //time elapsed
    imageWeight_func_elapsed_time = imageWeight_func_time_end - imageWeight_func_time_start;
    System.out.println("\nElapsed time of imageWeight.imageWeightAlgorithm is " + imageWeight_func_elapsed_time/1000000000 + "." + imageWeight_func_elapsed_time%1000000000 + " sec");


%>

<%= jsonCallback%>
<%--<%= pos%>
<%= imgWidth%>
<%= imgHeight%>
<%= requirementArea%>
<%= scale%>
<%= ap%>--%>
<%--<%= jsonObj%>--%>
